# This file was generated. Do not edit manually.

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type ChatMessage {
  createdAt: DateTime!
  id: Long!
  name: String!
  room: Room!
  roomId: Long!
  user: User
}

type Entity {
  allowFlipOnce: Boolean!
  canBeDeleted: Boolean!
  canFlip: Boolean!
  canMove: Boolean!
  canRotate: Boolean!
  deleteWithLink: Boolean!
  entitiesLinked: [Entity!]!
  group: EntityGroup!
  groupId: Long!
  height: Int!
  id: Long!
  image: String
  imageBack: String
  linkTo: Entity
  linkToId: Long
  moveWithLink: Boolean!
  name: String!
  onlyForOwner: Boolean!
  order: Int!
  rotation: Int!
  showBack: Boolean!
  width: Int!
  x: Int!
  y: Int!
}

type EntityGroup {
  canRemoveNotUsed: Boolean!
  entities: [Entity!]!
  game: Game!
  gameId: Long!
  id: Long!
  imageBack: String
  name: String!
  numberToGiveToPlayer: Int!
  randomize: Boolean!
}

type EntityPlayed {
  canBeDeleted: Boolean!
  canBeGiven: Boolean!
  canFlip: EntityFlippableState!
  canMove: Boolean!
  canRotate: Boolean!
  container: String
  createdAt: DateTime!
  deleted: Boolean!
  entitiesLinked: [EntityPlayed!]!
  entity: Entity!
  entityId: Long!
  gamePlayed: GamePlayed!
  gamePlayedId: Long!
  height: Int!
  id: Long!
  image: String
  imageBack: String
  isMine: Boolean!
  lastActorTouched: Player
  lastActorTouchedId: Long
  linkTo: EntityPlayed
  linkToId: Long
  name: String
  onlyForOwner: Boolean!
  order: Int!
  owner: Player
  ownerId: Long
  rotation: Int!
  showBack: Boolean!
  width: Int!
  x: Int!
  y: Int!
}

type Game {
  entitiesGroups: [EntityGroup!]!
  id: Long!
  image: String
  minPlayers: Int!
  name: String!
  type: String!
}

type GamePlayed {
  createdAt: DateTime!
  entities: [EntityPlayed]
  entitiesGroups: [EntityGroup]
  game: Game!
  gameId: Long!
  id: Long!
  isFinished: Boolean!
  players: [Player!]!
  room: Room!
  roomId: Long!
}

type Mutation {
  createRoom(name: String!): Room
  deleteEntitiesNotTouched(entityGroupId: Long!, gamePlayedId: Long!): [EntityPlayed!]!
  endGame(gamePlayedId: Long!): GamePlayed
  gameDeleteEntity(entityPlayedId: Long!): EntityPlayed!
  gameFlipEntity(entityPlayedId: Long!, onlyForOwner: Boolean, showBack: Boolean!): EntityPlayed!
  gameGiveEntity(container: String, entityPlayedId: Long!, newPlayerId: Long!): EntityPlayed!
  gameMoveEntity(container: String, entityPlayedId: Long!, x: Int!, y: Int!): EntityPlayed!
  gameRotateEntity(entityPlayedId: Long!, rotation: Int!): EntityPlayed!
  initializeGame(gameId: Long!, roomId: Long!): GamePlayed
  joinRoom(roomId: Long!): Room
  leaveRoom(roomId: Long!, userId: Long!): Room
  login(color: String!, name: String!): User
  randomizeEntities(entityGroupId: Long!, gamePlayedId: Long!, onlyTouched: Boolean!, restoreDeleted: Boolean!): [EntityPlayed!]!
  sendChatMessage(message: String!, roomId: Long!): ChatMessage
  setCurrentGame(gamePlayedId: Long!): Room
  updateEntity(dto: EntityUpdateDtoInput!, entityId: Long!): [Entity!]!
}

type Player {
  game: GamePlayed!
  gameId: Long!
  id: Long!
  user: User!
  userId: Long!
}

type Query {
  game(gameId: Long!): Game
  gamePlayed(gamePlayedId: Long!): GamePlayed
  games(order: [GameSortInput!]): [Game!]!
  me: User
  room(roomId: Long!): Room
  rooms(order: [RoomSortInput!]): [Room!]!
}

type Room {
  chatMessages(order: [ChatMessageSortInput!]): [ChatMessage!]!
  createdAt: DateTime!
  currentGame: GamePlayed
  currentGameId: Long
  games(order: [GamePlayedSortInput!]): [GamePlayed!]!
  id: Long!
  name: String!
  owner: User!
  ownerId: Long!
  userConnectedIsInside: Boolean!
  userConnectedIsOwner: Boolean!
  users(order: [UserSortInput!]): [User!]!
}

type Subscription {
  chatMessage: ChatMessage
  gameAction: EntityPlayed
  newRoom: Room
  roomAction: Room
}

type User {
  color: String!
  createdAt: DateTime!
  id: Long!
  joinedRooms: [Room!]!
  name: String!
  roomsCreated: [Room!]!
  token: String
}

enum ApplyPolicy {
  AFTER_RESOLVER
  BEFORE_RESOLVER
  VALIDATION
}

enum EntityFlippableState {
  NOT_FLIPPABLE
  NOT_SHOW_BACK
  ONLY_FOR_OWNER_IS_MINE_NOT_SHOW_BACK
  ONLY_FOR_OWNER_IS_MINE_SHOW_BACK
  ONLY_FOR_OWNER_SHOW_BACK
  SHOW_BACK
}

enum SortEnumType {
  ASC
  DESC
}

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime

"The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1."
scalar Long

input ChatMessageSortInput {
  createdAt: SortEnumType
  id: SortEnumType
  name: SortEnumType
  room: RoomSortInput
  roomId: SortEnumType
  user: UserSortInput
}

input EntityUpdateDtoInput {
  rotation: Int!
  showBack: Boolean!
  x: Int!
  y: Int!
}

input GamePlayedSortInput {
  createdAt: SortEnumType
  game: GameSortInput
  gameId: SortEnumType
  id: SortEnumType
  isFinished: SortEnumType
  room: RoomSortInput
  roomId: SortEnumType
}

input GameSortInput {
  enabled: SortEnumType
  id: SortEnumType
  image: SortEnumType
  minPlayers: SortEnumType
  name: SortEnumType
  type: SortEnumType
}

input RoomSortInput {
  createdAt: SortEnumType
  currentGame: GamePlayedSortInput
  currentGameId: SortEnumType
  id: SortEnumType
  name: SortEnumType
  owner: UserSortInput
  ownerId: SortEnumType
}

input UserSortInput {
  color: SortEnumType
  createdAt: SortEnumType
  id: SortEnumType
  name: SortEnumType
}
